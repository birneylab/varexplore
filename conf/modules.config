/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: FILTER_CRAM {
        ext.args2 = { meta.region }
    }
    withName: EXTRACT_POSSIBLE_GT {
        ext.args = {
            "-s ${meta.samples} -r ${meta.region} -i 'ID == \"${meta.variant}\"' -f '[%GT\\n]'" 
        }
    }
    withName: EXTRACT_SAMPLES_BY_GT {
        ext.args = {
            "-s ${meta.samples} -r ${meta.region} -i 'ID == \"${meta.variant}\" & GT == \"${meta.gt}\"' -f '[%SAMPLE\\n]'" 
        }
    }
    withName: RENAME_SM_TAG {
        ext.args = {
            "-c \"sed -E 's%(^@RG.*)SM:(${meta.samples.join('|')})%\\1SM:${meta.id}%'\""
        }
        ext.prefix = { "${meta.id}.sm_renamed" }
        publishDir = [
            path: { "${params.outdir}/reads/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/reads/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName: GATK4_HAPLOTYPECALLER {
        ext.args = "--ERC GVCF"
    }
    withName: GATK4_GENOTYPEGVCFS {
        publishDir = [
            path: { "${params.outdir}/variants/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName: PUBLISH_SAMPLE_ANNOT {
        ext.prefix = { "${meta.id}.sample_annotation.tsv" }
        publishDir = [
            path: { "${params.outdir}/variants/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName: ENSEMBLVEP_DOWNLOAD {
        ext.args = "--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE"
    }
    withName: ENSEMBLVEP_VEP {
        ext.prefix = { "${meta.id}.vep" }
        ext.args   = (
            "--format vcf \\" +
            "--regulatory \\" +
            "--numbers \\" +
            "--terms SO \\" +
            "--mirna \\" +
            "--symbol \\" +
            "--uniprot \\" +
            "--biotype \\" +
            "--check_existing \\" +
            "--check_svs \\" +
            "--variant_class \\" +
            "--show_ref_allele \\" +
            "--individual all \\" +
            "--tab \\" +
            "--fields " +
            "'" +
            "Uploaded variation," +
            "Location," +
            "REF_ALLELE," +
            "Allele," +
            "VARIANT_CLASS," +
            "Gene," +
            "Feature," +
            "Feature_type," +
            "SYMBOL," +
            "SYMBOL_SOURCE," +
            "SWISSPROT," +
            "TREMBL," +
            "UNIPARC," +
            "BIOTYPE," +
            "IMPACT," +
            "Consequence," +
            "EXON," +
            "cDNA_position," +
            "CDS_position," +
            "Protein_position," +
            "Amino_acids," +
            "Codons," +
            "IND," +
            "ZYG" +
            "'"
        )
        publishDir = [
            path: { "${params.outdir}/ensembl_vep/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName: FORMAT_VEP_OUTPUT {
        publishDir = [
            path: { "${params.outdir}/ensembl_vep/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}